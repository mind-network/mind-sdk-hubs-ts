/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "./common";

export declare namespace IFheKeySet {
  export type FheKeyStruct = {
    keyURL: string;
    keyHash: string;
    keySig: BytesLike;
    signer: AddressLike;
  };

  export type FheKeyStructOutput = [
    keyURL: string,
    keyHash: string,
    keySig: string,
    signer: string
  ] & { keyURL: string; keyHash: string; keySig: string; signer: string };

  export type FheKeySetStruct = {
    privateKey: IFheKeySet.FheKeyStruct;
    computeKey: IFheKeySet.FheKeyStruct;
    publicKey: IFheKeySet.FheKeyStruct;
  };

  export type FheKeySetStructOutput = [
    privateKey: IFheKeySet.FheKeyStructOutput,
    computeKey: IFheKeySet.FheKeyStructOutput,
    publicKey: IFheKeySet.FheKeyStructOutput
  ] & {
    privateKey: IFheKeySet.FheKeyStructOutput;
    computeKey: IFheKeySet.FheKeyStructOutput;
    publicKey: IFheKeySet.FheKeyStructOutput;
  };
}

export interface FheKeyRegistryInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "addFheKeySet"
      | "fheKeySets"
      | "initialize"
      | "owner"
      | "renounceOwnership"
      | "transferOwnership"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "FheKeySetAdded"
      | "Initialized"
      | "OwnershipTransferred"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "addFheKeySet",
    values: [IFheKeySet.FheKeySetStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "fheKeySets",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [AddressLike]
  ): string;

  decodeFunctionResult(
    functionFragment: "addFheKeySet",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "fheKeySets", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
}

export namespace FheKeySetAddedEvent {
  export type InputTuple = [keyID: BigNumberish, addedBy: AddressLike];
  export type OutputTuple = [keyID: bigint, addedBy: string];
  export interface OutputObject {
    keyID: bigint;
    addedBy: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace InitializedEvent {
  export type InputTuple = [version: BigNumberish];
  export type OutputTuple = [version: bigint];
  export interface OutputObject {
    version: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OwnershipTransferredEvent {
  export type InputTuple = [previousOwner: AddressLike, newOwner: AddressLike];
  export type OutputTuple = [previousOwner: string, newOwner: string];
  export interface OutputObject {
    previousOwner: string;
    newOwner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface FheKeyRegistry extends BaseContract {
  connect(runner?: ContractRunner | null): FheKeyRegistry;
  waitForDeployment(): Promise<this>;

  interface: FheKeyRegistryInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  addFheKeySet: TypedContractMethod<
    [newKeySet: IFheKeySet.FheKeySetStruct],
    [bigint],
    "nonpayable"
  >;

  fheKeySets: TypedContractMethod<
    [arg0: BigNumberish],
    [
      [
        IFheKeySet.FheKeyStructOutput,
        IFheKeySet.FheKeyStructOutput,
        IFheKeySet.FheKeyStructOutput
      ] & {
        privateKey: IFheKeySet.FheKeyStructOutput;
        computeKey: IFheKeySet.FheKeyStructOutput;
        publicKey: IFheKeySet.FheKeyStructOutput;
      }
    ],
    "view"
  >;

  initialize: TypedContractMethod<[_owner: AddressLike], [void], "nonpayable">;

  owner: TypedContractMethod<[], [string], "view">;

  renounceOwnership: TypedContractMethod<[], [void], "nonpayable">;

  transferOwnership: TypedContractMethod<
    [newOwner: AddressLike],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "addFheKeySet"
  ): TypedContractMethod<
    [newKeySet: IFheKeySet.FheKeySetStruct],
    [bigint],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "fheKeySets"
  ): TypedContractMethod<
    [arg0: BigNumberish],
    [
      [
        IFheKeySet.FheKeyStructOutput,
        IFheKeySet.FheKeyStructOutput,
        IFheKeySet.FheKeyStructOutput
      ] & {
        privateKey: IFheKeySet.FheKeyStructOutput;
        computeKey: IFheKeySet.FheKeyStructOutput;
        publicKey: IFheKeySet.FheKeyStructOutput;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "initialize"
  ): TypedContractMethod<[_owner: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "renounceOwnership"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "transferOwnership"
  ): TypedContractMethod<[newOwner: AddressLike], [void], "nonpayable">;

  getEvent(
    key: "FheKeySetAdded"
  ): TypedContractEvent<
    FheKeySetAddedEvent.InputTuple,
    FheKeySetAddedEvent.OutputTuple,
    FheKeySetAddedEvent.OutputObject
  >;
  getEvent(
    key: "Initialized"
  ): TypedContractEvent<
    InitializedEvent.InputTuple,
    InitializedEvent.OutputTuple,
    InitializedEvent.OutputObject
  >;
  getEvent(
    key: "OwnershipTransferred"
  ): TypedContractEvent<
    OwnershipTransferredEvent.InputTuple,
    OwnershipTransferredEvent.OutputTuple,
    OwnershipTransferredEvent.OutputObject
  >;

  filters: {
    "FheKeySetAdded(uint256,address)": TypedContractEvent<
      FheKeySetAddedEvent.InputTuple,
      FheKeySetAddedEvent.OutputTuple,
      FheKeySetAddedEvent.OutputObject
    >;
    FheKeySetAdded: TypedContractEvent<
      FheKeySetAddedEvent.InputTuple,
      FheKeySetAddedEvent.OutputTuple,
      FheKeySetAddedEvent.OutputObject
    >;

    "Initialized(uint64)": TypedContractEvent<
      InitializedEvent.InputTuple,
      InitializedEvent.OutputTuple,
      InitializedEvent.OutputObject
    >;
    Initialized: TypedContractEvent<
      InitializedEvent.InputTuple,
      InitializedEvent.OutputTuple,
      InitializedEvent.OutputObject
    >;

    "OwnershipTransferred(address,address)": TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
    OwnershipTransferred: TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
  };
}
