/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Contract, Interface, type ContractRunner } from "ethers";
import type {
  FheKeyRegistry,
  FheKeyRegistryInterface,
} from "../FheKeyRegistry";

const _abi = [
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "contractID",
        type: "bytes32",
      },
      {
        internalType: "uint16",
        name: "errorCode",
        type: "uint16",
      },
    ],
    name: "GeneralError",
    type: "error",
  },
  {
    inputs: [],
    name: "InvalidInitialization",
    type: "error",
  },
  {
    inputs: [],
    name: "NotInitializing",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "owner",
        type: "address",
      },
    ],
    name: "OwnableInvalidOwner",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "account",
        type: "address",
      },
    ],
    name: "OwnableUnauthorizedAccount",
    type: "error",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "uint256",
        name: "keyID",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "address",
        name: "addedBy",
        type: "address",
      },
    ],
    name: "FheKeySetAdded",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "uint64",
        name: "version",
        type: "uint64",
      },
    ],
    name: "Initialized",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "previousOwner",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "OwnershipTransferred",
    type: "event",
  },
  {
    inputs: [
      {
        components: [
          {
            components: [
              {
                internalType: "string",
                name: "keyURL",
                type: "string",
              },
              {
                internalType: "string",
                name: "keyHash",
                type: "string",
              },
              {
                internalType: "bytes",
                name: "keySig",
                type: "bytes",
              },
              {
                internalType: "address",
                name: "signer",
                type: "address",
              },
            ],
            internalType: "struct IFheKeySet.FheKey",
            name: "privateKey",
            type: "tuple",
          },
          {
            components: [
              {
                internalType: "string",
                name: "keyURL",
                type: "string",
              },
              {
                internalType: "string",
                name: "keyHash",
                type: "string",
              },
              {
                internalType: "bytes",
                name: "keySig",
                type: "bytes",
              },
              {
                internalType: "address",
                name: "signer",
                type: "address",
              },
            ],
            internalType: "struct IFheKeySet.FheKey",
            name: "computeKey",
            type: "tuple",
          },
          {
            components: [
              {
                internalType: "string",
                name: "keyURL",
                type: "string",
              },
              {
                internalType: "string",
                name: "keyHash",
                type: "string",
              },
              {
                internalType: "bytes",
                name: "keySig",
                type: "bytes",
              },
              {
                internalType: "address",
                name: "signer",
                type: "address",
              },
            ],
            internalType: "struct IFheKeySet.FheKey",
            name: "publicKey",
            type: "tuple",
          },
        ],
        internalType: "struct IFheKeySet.FheKeySet",
        name: "newKeySet",
        type: "tuple",
      },
    ],
    name: "addFheKeySet",
    outputs: [
      {
        internalType: "uint256",
        name: "keyID",
        type: "uint256",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    name: "fheKeySets",
    outputs: [
      {
        components: [
          {
            internalType: "string",
            name: "keyURL",
            type: "string",
          },
          {
            internalType: "string",
            name: "keyHash",
            type: "string",
          },
          {
            internalType: "bytes",
            name: "keySig",
            type: "bytes",
          },
          {
            internalType: "address",
            name: "signer",
            type: "address",
          },
        ],
        internalType: "struct IFheKeySet.FheKey",
        name: "privateKey",
        type: "tuple",
      },
      {
        components: [
          {
            internalType: "string",
            name: "keyURL",
            type: "string",
          },
          {
            internalType: "string",
            name: "keyHash",
            type: "string",
          },
          {
            internalType: "bytes",
            name: "keySig",
            type: "bytes",
          },
          {
            internalType: "address",
            name: "signer",
            type: "address",
          },
        ],
        internalType: "struct IFheKeySet.FheKey",
        name: "computeKey",
        type: "tuple",
      },
      {
        components: [
          {
            internalType: "string",
            name: "keyURL",
            type: "string",
          },
          {
            internalType: "string",
            name: "keyHash",
            type: "string",
          },
          {
            internalType: "bytes",
            name: "keySig",
            type: "bytes",
          },
          {
            internalType: "address",
            name: "signer",
            type: "address",
          },
        ],
        internalType: "struct IFheKeySet.FheKey",
        name: "publicKey",
        type: "tuple",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_owner",
        type: "address",
      },
    ],
    name: "initialize",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "owner",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "renounceOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "transferOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
] as const;

export class FheKeyRegistry__factory {
  static readonly abi = _abi;
  static createInterface(): FheKeyRegistryInterface {
    return new Interface(_abi) as FheKeyRegistryInterface;
  }
  static connect(
    address: string,
    runner?: ContractRunner | null
  ): FheKeyRegistry {
    return new Contract(address, _abi, runner) as unknown as FheKeyRegistry;
  }
}
